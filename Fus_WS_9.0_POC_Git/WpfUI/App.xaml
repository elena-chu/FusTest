<prism:PrismApplication x:Class="WpfUI.App"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:converters="clr-namespace:Ws.Extensions.UI.Wpf.Converters;assembly=Ws.Extensions.UI.Wpf"
    xmlns:prism="http://prismlibrary.com/"
    xmlns:extension="http://schemas.insightec.com/wpf/"
    xmlns:local="clr-namespace:WpfUI">
  <Application.Resources>
    <ResourceDictionary>
      <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/Ws.Extensions.UI.Wpf;component/Assets/Styles/Resources.xaml" />
        <ResourceDictionary Source="/Ws.Fus.UI.Wpf;component/Images/Images.xaml" />
      </ResourceDictionary.MergedDictionaries>

      <Style x:Key="ToolButtonBaseStyle" TargetType="ButtonBase" BasedOn="{StaticResource ToolButtonGenericBaseStyle}">
        <Setter Property="Command" Value="{Binding ActionCommand}" />
        <Setter Property="ToolTipService.ToolTip" Value="{Binding Name, FallbackValue=Name}" />
      </Style>

      <Style x:Key="ToolToggleButtonStyle" TargetType="ToggleButton" BasedOn="{StaticResource ToolButtonBaseStyle}">
        <Setter Property="IsChecked" Value="{Binding IsActive, Mode=TwoWay}" />
        <Style.Triggers>
          <Trigger Property="IsChecked" Value="True">
            <Setter Property="Background" Value="{StaticResource StrongBrush}" />
          </Trigger>
        </Style.Triggers>
      </Style>

      <Style x:Key="ContextMenuItemSimpleStyle" TargetType="MenuItem">
        <Setter Property="Header" Value="{Binding Name}"/>
        <Setter Property="IsCheckable" Value="False" />
        <Setter Property="Command" Value="{Binding ActionCommand}" />
      </Style>

      <Style x:Key="ContextMenuItemStyle" TargetType="MenuItem" BasedOn="{StaticResource ContextMenuItemSimpleStyle}">
        <Setter Property="IsCheckable" Value="True" />
        <Setter Property="IsChecked" Value="{Binding IsActive, Mode=TwoWay}" />
      </Style>

      <Style TargetType="{x:Type ContextMenu}" x:Key="ToolsContextMenuSimpleStyle" >
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Grid.IsSharedSizeScope" Value="true" />
        <Setter Property="HasDropShadow" Value="True" />
        <Setter Property="StaysOpen" Value="True" />
        <Setter Property="Placement" Value="Bottom" />
        <Setter Property="ItemsSource" Value="{Binding ChildActions}" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource ContextMenuItemSimpleStyle}" />
      </Style>

      <Style TargetType="{x:Type ContextMenu}" x:Key="ToolsContextMenuStyle" BasedOn="{StaticResource ToolsContextMenuSimpleStyle}">
        <Setter Property="ItemContainerStyle" Value="{StaticResource ContextMenuItemStyle}" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ContextMenu}">
              <Border x:Name="Border" Background="{StaticResource BasicBrush}" BorderThickness="1" TextBlock.FontFamily="Arial">
                <Grid>
                  <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                  </Grid.RowDefinitions>
                  <MenuItem x:Name="SelectAll" Header="All" IsCheckable="True" Command="{Binding DataContext.SetAllChildActionsActiveCommand, ElementName=ItemPresenter}" CommandParameter="{Binding IsChecked, RelativeSource={RelativeSource Self}}"/>
                  <ItemsPresenter x:Name="ItemPresenter" Grid.Row="1" />
                </Grid>
              </Border>
                <ControlTemplate.Triggers>
                    <DataTrigger Binding="{Binding HasActiveChildActions}" Value="True">
                        <Setter TargetName="SelectAll" Property="IsChecked" Value="True" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding HasActiveChildActions}" Value="False">
                        <Setter Property="IsChecked" TargetName="SelectAll" Value="False" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding HasActiveChildActions}" Value="{x:Null}">
                        <Setter Property="IsChecked" TargetName="SelectAll" Value="False" />
                    </DataTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>

      <Style x:Key="ToolButtonStyle" TargetType="Button"  BasedOn="{StaticResource ToolButtonBaseStyle}">
        <Setter Property="Command" Value="{Binding ActionCommand}" />
      </Style>

      <DataTemplate x:Key="ButtonWithSubMenuTemplate" >
        <Grid>
          <Grid.Resources>
            <converters:BooleanToTrueFalseValueConverter x:Key="BooleanToTrueFalseColorValueConverter" IsThreeState="True" NullValue="{StaticResource HalfFilledBrush}" TrueValue="{StaticResource BlackBrush}" FalseValue="{StaticResource TransparentBrush}" />
          </Grid.Resources>
          <TextBlock Text="{Binding }" VerticalAlignment="Top" />
          <Path x:Name="Path" Data="{StaticResource Triangle}" HorizontalAlignment="Right" VerticalAlignment="Bottom" 
                Margin="0,0,-3,-2" Stretch="Fill" Stroke="Black" Width="10" Height="7"
                DataContext="{Binding Path=DataContext, RelativeSource={RelativeSource AncestorType=ButtonBase}}"
                Fill="{Binding HasActiveChildActions, Converter={StaticResource BooleanToTrueFalseColorValueConverter}}"/>
        </Grid>
        <!--<DataTemplate.Triggers>
                <DataTrigger Binding="{Binding HasActiveChildActions}" Value="True">
                    <Setter Property="Fill" TargetName="Path" Value="{StaticResource HighBrush}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding HasActiveChildActions}" Value="False">
                    <Setter Property="Fill" TargetName="Path" Value="Transparent" />
                </DataTrigger>
                <DataTrigger Binding="{Binding HasActiveChildActions}" Value="{x:Null}">
                    <Setter Property="Fill" TargetName="Path" Value="{StaticResource HalfFilledBrush}" />
                </DataTrigger>
            </DataTemplate.Triggers>-->
      </DataTemplate>

      <Style x:Key="ButtonWithSubMenuStyle" TargetType="Button" BasedOn="{StaticResource ToolButtonStyle}">
        <!--<Setter Property="Height" Value="30" />-->
        <Setter Property="ContentTemplate" Value="{StaticResource ButtonWithSubMenuTemplate}" />
        <Setter Property="extension:LeftClickContextMenu.IsLeftClickEnabled" Value="True" />
        <Setter Property="ContextMenuService.IsEnabled" Value="False" />
        <Setter Property="ContextMenuService.ShowOnDisabled" Value="True" />
        <Setter Property="ContextMenuService.PlacementTarget" Value="{Binding RelativeSource={RelativeSource Self}}" />
      </Style>

      <Style x:Key="ToggleButtonWithSubMenuStyle" TargetType="ToggleButton" BasedOn="{StaticResource ToolToggleButtonStyle}">
        <!--<Setter Property="Height" Value="30" />-->
        <Setter Property="ContentTemplate" Value="{StaticResource ButtonWithSubMenuTemplate}" />
        <Setter Property="extension:LeftClickContextMenu.IsLeftClickEnabled" Value="True" />
        <Setter Property="ContextMenuService.IsEnabled" Value="False" />
        <Setter Property="ContextMenuService.ShowOnDisabled" Value="True" />
        <Setter Property="ContextMenuService.PlacementTarget" Value="{Binding RelativeSource={RelativeSource Self}}" />
      </Style>


      <Style x:Key="ToggleButtonWithSubMenuMeasureStyle" TargetType="ToggleButton" BasedOn="{StaticResource ToggleButtonWithSubMenuStyle}">
        <!--Using without Converter={StaticResource InvertedBooleanConverter} because on click IsChecked property already set inverted-->
        <!--<Setter Property="extensions:LeftClickContextMenu.OpeningFlag" Value="{Binding Path=IsChecked, RelativeSource={RelativeSource Self}}" />-->
        <Setter Property="extension:LeftClickContextMenu.UsePreviewEvent" Value="True" />
        <!-- OnPreview using with converter-->
        <Setter Property="extension:LeftClickContextMenu.OpeningFlag" Value="{Binding Path=IsChecked, RelativeSource={RelativeSource Self}, Converter={StaticResource InvertedBooleanConverter}}" />
      </Style>


      <Style x:Key="ContextMenuItemMeasureStyle" TargetType="MenuItem">
        <Setter Property="Header" Value="{Binding Name}"/>
        <Setter Property="IsCheckable" Value="False" />
        <Setter Property="Command" Value="{Binding ActionCommand}" />
        <Setter Property="Width" Value="Auto" />
      </Style>


      <Style TargetType="{x:Type ContextMenu}" x:Key="HorizontalContextMenu" BasedOn="{StaticResource ToolsContextMenuStyle}">
        <Setter Property="ItemContainerStyle" Value="{StaticResource ContextMenuItemMeasureStyle}" />
        <Setter Property="Placement" Value="Right" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ContextMenu}">
              <Border x:Name="Border" Background="{StaticResource BasicBrush}" BorderThickness="1" TextBlock.FontFamily="Arial">
                <!--<ItemsPresenter x:Name="ItemPresenter"  />-->
                <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" Orientation="Horizontal" Height="28"/>
              </Border>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>

    </ResourceDictionary>
  </Application.Resources>
</prism:PrismApplication>
